{"ast":null,"code":"'use strict';\n/*\n * cls-bluebird\n * Function to shim `Promise.coroutine`\n *\n * Works by binding the `.next()` and `.throw()` methods of generator to CLS context\n * at time when coroutine is executed.\n *\n * In bluebird v3.x, running the coroutine internally calls `.lastly()` if cancellation is enabled.\n * To prevent unnecessary binding of the `.lastly()` callback to CLS context, this patch\n * temporarily disables the patch on `Promise.prototype.lastly`.\n * NB This patch could break if bluebird internals change, but this is covered by the tests.\n */\n// Modules\n\nvar shimmer = require('shimmer'); // Exports\n\n/**\n * Patch `Promise.coroutine` or `Promise.spawn` to maintain current CLS context after all `yield` statements.\n *\n * @param {string} methodName - method name (either 'coroutine' or 'spawn')\n * @param {Function} Promise - Bluebird Promise constructor to patch\n * @param {Object} ns - CLS namespace to bind callbacks to\n * @returns {undefined}\n */\n\n\nmodule.exports = function (methodName, Promise, ns, v3) {\n  var lastlyPatched = Promise.prototype.lastly,\n      lastlyOriginal = Promise.prototype.lastly.__original; // Patch method\n\n  shimmer.wrap(Promise, methodName, function (original) {\n    return function (generatorFunction, options) {\n      // NB If `generatorFunction` is not a function, do not alter it.\n      // Pass value directly to bluebird which will throw an error.\n      if (typeof generatorFunction === 'function') {\n        // Create proxy generator function\n        var generatorFunctionOriginal = generatorFunction;\n\n        generatorFunction = function generatorFunction() {\n          // Create generator from generator function\n          var generator = generatorFunctionOriginal.apply(this, arguments); // Bind `.next()`, '.throw()' and `.return()` to current CLS context.\n          // NB CLS context is from when coroutine is called, not when created.\n\n          ['next', 'throw', 'return'].forEach(function (name) {\n            if (typeof generator[name] === 'function') generator[name] = ns.bind(generator[name]);\n          });\n          return generator;\n        };\n      } // Temporarily remove patch from `Promise.prototype.lastly` in bluebird v3\n      // to avoid unnecessary binding to CLS context.\n\n\n      var self = this;\n\n      if (methodName === 'spawn' && v3) {\n        return tempPatchLastly(function () {\n          return original.call(self, generatorFunction, options);\n        });\n      }\n\n      var fn = original.call(this, generatorFunction, options);\n\n      if (methodName === 'coroutine' && v3) {\n        return function () {\n          var self = this,\n              args = arguments;\n          return tempPatchLastly(function () {\n            return fn.apply(self, args);\n          });\n        };\n      }\n\n      return fn;\n    };\n  });\n\n  function tempPatchLastly(fn) {\n    Promise.prototype.lastly = lastlyOriginal;\n    var res = fn();\n    Promise.prototype.lastly = lastlyPatched;\n    return res;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
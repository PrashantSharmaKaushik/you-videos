{"ast":null,"code":"'use strict';\n/*\n * cls-bluebird\n * Function to shim `Promise.prototype._resolveFromExecutor`\n * in order to patch `onCancel` handler in `new Promise()`.\n */\n// Modules\n\nvar shimmer = require('shimmer'); // Exports\n\n/**\n * Patch `_resolveFromExecutor` proto method to run `onCancel` callbacks in current CLS context.\n *\n * @param {Function} Promise - Bluebird Promise constructor to patch\n * @param {Object} ns - CLS namespace to bind callbacks to\n * @returns {undefined}\n */\n\n\nmodule.exports = function (Promise, ns) {\n  // Patch method\n  shimmer.wrap(Promise.prototype, '_resolveFromExecutor', function (_resolveFromExecutorOriginal) {\n    return function (executor) {\n      // Patch executor\n      var executorPatched = function executorPatched() {\n        var onCancel = arguments[2];\n\n        if (onCancel) {\n          // Patch onCancel function\n          arguments[2] = function (fn) {\n            // Bind onCancel handler to current CLS context\n            if (typeof fn === 'function') fn = ns.bind(fn);\n            return onCancel.call(this, fn);\n          };\n        }\n\n        return executor.apply(this, arguments);\n      }; // Call original method\n\n\n      return _resolveFromExecutorOriginal.call(this, executorPatched);\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"script"}
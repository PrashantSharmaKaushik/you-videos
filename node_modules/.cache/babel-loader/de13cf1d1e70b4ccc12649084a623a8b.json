{"ast":null,"code":"'use strict';\n/*\n * cls-bluebird\n * Function to shim `Promise.using`\n *\n * `Promise.using()` calls `.then()` and `.lastly` internally which leads to\n * unnecessary CLS context binding with a naive patch.\n *\n * This custom patch intercepts calls to `Promise.all()` (v3) or `Promise.settle()` (v2)\n * within `Promise.using()` and patches the resulting promise's `.then`/`.lastly` methods\n * so they do not bind callbacks to CLS context.\n *\n * NB This patch could break if bluebird internals change, but this is covered by the tests.\n */\n// Modules\n\nvar shimmer = require('shimmer'); // Exports\n\n/**\n * Patch `Promise.using` method to run callbacks in current CLS context.\n *\n * @param {Function} Promise - Bluebird Promise constructor to patch\n * @param {Object} ns - CLS namespace to bind callbacks to\n * @param {boolean} v3 - `true` if bluebird being patched is v3.x\n * @returns {undefined}\n */\n\n\nmodule.exports = function (Promise, ns, v3) {\n  (v3 ? patchV3 : patchV2)(Promise, ns);\n}; // Patch for `Promise.using()` in bluebird v3\n\n\nfunction patchV3(Promise, ns) {\n  var thenOriginal = Promise.prototype.then.__original,\n      lastlyOriginal = Promise.prototype.lastly.__original; // Patch method\n\n  shimmer.wrap(Promise, 'using', function (usingOriginal) {\n    return function () {\n      // Bind `using` callback (last arg)\n      var argIndex = arguments.length - 1,\n          callback = arguments[argIndex];\n      if (typeof callback === 'function') arguments[argIndex] = ns.bind(callback); // Temporarily patch `Promise.all()`\n\n      shimmer.wrap(Promise, 'all', function (allOriginal) {\n        return function (promises) {\n          // Remove temporary patch on `Promise.all()`\n          Promise.all = allOriginal; // Call original `Promise.all()`\n\n          var p = allOriginal.call(this, promises); // Patch `.then()` method on this promise to not bind callbacks\n\n          p.then = function () {\n            var p = thenOriginal.apply(this, arguments); // Patch `.lastly()` method on this promise to not bind callbacks\n\n            p.lastly = lastlyOriginal;\n            return p;\n          };\n\n          return p;\n        };\n      }); // Call original `Promise.using()` method\n\n      return usingOriginal.apply(this, arguments);\n    };\n  });\n} // Patch for `Promise.using()` in bluebird v2\n\n\nfunction patchV2(Promise, ns) {\n  var thenOriginal = Promise.prototype.then.__original; // Patch method\n\n  shimmer.wrap(Promise, 'using', function (usingOriginal) {\n    return function () {\n      // Bind `using` callback (last arg)\n      var argIndex = arguments.length - 1,\n          callback = arguments[argIndex];\n      if (typeof callback === 'function') arguments[argIndex] = ns.bind(callback); // Temporarily patch `Promise.settle()`\n\n      shimmer.wrap(Promise, 'settle', function (settleOriginal) {\n        return function (resources) {\n          // Remove temporary patch on `Promise.settle()`\n          Promise.settle = settleOriginal; // Call original `Promise.settle()`\n\n          var p = settleOriginal.call(this, resources); // Patch `.then()` method on this promise to not bind callbacks\n\n          p.then = function () {\n            var p = thenOriginal.apply(this, arguments); // Patch `.then()` method on this promise to not bind callbacks\n\n            p.then = thenOriginal;\n            return p;\n          };\n\n          return p;\n        };\n      }); // Call original `Promise.using()` method\n\n      return usingOriginal.apply(this, arguments);\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
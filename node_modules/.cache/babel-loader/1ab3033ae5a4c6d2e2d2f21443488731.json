{"ast":null,"code":"'use strict';\n\nvar Bluebird = require('bluebird'),\n    assign = require('lodash/assign'),\n    forEach = require('lodash/forEach'),\n    isFunction = require('lodash/isFunction'),\n    isPlainObject = require('lodash/isPlainObject'),\n    isString = require('lodash/isString'),\n    isUndefined = require('lodash/isUndefined'),\n    keys = require('lodash/keys'),\n    errors = require('./errors.js'); // Load Request freshly - so that users can require an unaltered request instance!\n\n\nvar request = function () {\n  function clearCache() {\n    forEach(keys(require.cache), function (key) {\n      delete require.cache[key];\n    });\n  }\n\n  var temp = assign({}, require.cache);\n  clearCache();\n\n  var freshRequest = require('request');\n\n  clearCache();\n  assign(require.cache, temp);\n  return freshRequest;\n}();\n\nvar defaultTransformations = {\n  HEAD: function HEAD(body, response, resolveWithFullResponse) {\n    return resolveWithFullResponse ? response : response.headers;\n  }\n};\n\nfunction RP$callback(err, response, body) {\n  /* jshint validthis:true */\n  var self = this;\n  var origCallbackThrewException = false,\n      thrownException;\n\n  if (isFunction(self._rp_callbackOrig)) {\n    try {\n      self._rp_callbackOrig.apply(self, arguments);\n    } catch (e) {\n      origCallbackThrewException = true;\n      thrownException = e;\n    }\n  }\n\n  if (err) {\n    self._rp_reject(new errors.RequestError(err, self._rp_options, response));\n  } else if (self._rp_options.simple && !/^2/.test('' + response.statusCode)) {\n    if (isFunction(self._rp_options.transform)) {\n      new Bluebird(function (resolve) {\n        resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise\n      }).then(function (transformedResponse) {\n        self._rp_reject(new errors.StatusCodeError(response.statusCode, body, self._rp_options, transformedResponse));\n      }).catch(function (err) {\n        self._rp_reject(new errors.TransformError(err, self._rp_options, response));\n      });\n    } else {\n      self._rp_reject(new errors.StatusCodeError(response.statusCode, body, self._rp_options, response));\n    }\n  } else {\n    if (isFunction(self._rp_options.transform)) {\n      new Bluebird(function (resolve) {\n        resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise\n      }).then(function (transformedResponse) {\n        self._rp_resolve(transformedResponse);\n      }).catch(function (err) {\n        self._rp_reject(new errors.TransformError(err, self._rp_options, response));\n      });\n    } else if (self._rp_options.resolveWithFullResponse) {\n      self._rp_resolve(response);\n    } else {\n      self._rp_resolve(body);\n    }\n  }\n\n  if (origCallbackThrewException) {\n    throw thrownException;\n  }\n}\n\nvar originalInit = request.Request.prototype.init;\n\nrequest.Request.prototype.init = function RP$initInterceptor(options) {\n  var self = this; // Init may be called again - currently in case of redirects\n\n  if (isPlainObject(options) && self._callback === undefined && self._rp_promise === undefined) {\n    self._rp_promise = new Bluebird(function (resolve, reject) {\n      self._rp_resolve = resolve;\n      self._rp_reject = reject;\n    });\n    self._rp_callbackOrig = self.callback;\n    self.callback = RP$callback;\n\n    if (isString(options.method)) {\n      options.method = options.method.toUpperCase();\n    }\n\n    options.transform = options.transform || defaultTransformations[options.method];\n    self._rp_options = options;\n    self._rp_options.simple = options.simple === false ? false : true;\n    self._rp_options.resolveWithFullResponse = options.resolveWithFullResponse === true ? true : false;\n  }\n\n  return originalInit.apply(self, arguments);\n};\n\nfunction expose(methodToExpose, exposeAs) {\n  exposeAs = exposeAs || methodToExpose;\n  /* istanbul ignore if */\n\n  if (!isUndefined(request.Request.prototype[exposeAs])) {\n    throw new Error('Unable to expose method \"' + exposeAs + '\". It is already implemented by Request. Please visit https://github.com/request/request-promise/wiki/Troubleshooting');\n  }\n\n  request.Request.prototype[exposeAs] = function RP$exposed() {\n    return this._rp_promise[methodToExpose].apply(this._rp_promise, arguments);\n  };\n}\n\nexpose('then');\nexpose('catch');\nexpose('finally');\n\nrequest.Request.prototype.promise = function RP$promise() {\n  return this._rp_promise;\n};\n/* istanbul ignore next */\n// Function covered but not seen by Instanbul.\n\n\nrequest.bindCLS = function RP$bindCLS(ns) {\n  require('cls-bluebird')(ns);\n};\n\nmodule.exports = request;","map":null,"metadata":{},"sourceType":"script"}